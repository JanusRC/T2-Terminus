This application note relates to the T2 boot loader demonstration.

A number of design choices were made in the creation of this demo, many
of these were aimed at simplicity and clarity, and may not be applicable
to all situations and use cases. Please review the design, and confirm
it meets your own needs and requirements.

The STM32F2 series part use in the base level T2 design has 256 KB of
FLASH, this flash is broken into uneven sizes, basically 4x 16 KB, 1x 64
KB, and 1x 128 KB. Larger devices have more 128 KB sectors.  Devices
with 2 MB have a more complex arrangement. The smaller sectors are
better suited to configuration and calibration data, the first sector
needs to contain code, and in this case is adequate to totally contain
the boot loader. A boot loader supporting access to the SDIO card with a
FAT file system will also fit in the first 16 KB sector. More complex
solutions may require additional space. For simplicity the demonstration
here will use the 128 KB sector to hold the application code, and this
code may be up to 128 KB in size. The projects are broken into two
pieces, one for the boot loader, and one for the application, both use
the same RAM, but the load addresses in FLASH are different, 0x08000000
vs 0x08020000. They may be built and debugged separately, and the boot
loader permits a new application binary to be uploaded using the
X-Modem1K protocol.

The boot loader resides between 0x08000000 and 0x08003FFF, as a 16 KB
region at the bottom of memory, and is executed immediately at reset.
The application resides between 0x08020000 and 0x0803FFFF, and control
is then transferred to the application by the boot loader after it has
verified the integrity of the applications memory image. The 128 KB
application image, in normal use, is generated by converting the HEX
file output of the development tools and performing a 32-bit CRC across
this data. The last 4 bytes of the image are the CRC computed against
the prior bytes, when feed through the CRC routine will divide cleanly
leaving a remainder of zero.

DWORD CRC32(DWORD Crc, DWORD Size, BYTE *Buffer)
{
  while(Size--)
  {
  int i;

    Crc = Crc ^ (DWORD)*Buffer++;

    for(i=0; i<8; i++)
      if (Crc & 1)
        Crc = (Crc >> 1) ^ 0xEDB88320; // x32 + x26 + x23 + x22 + x16 +
x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1, Small Endian, Right
Shifting
      else
        Crc = (Crc >> 1);
  }

  return(Crc);
}

Testing for validity

    if (CRC32(0xFFFFFFFF, 0x20000, (void *)APPLICATION_BASE) != 0)
        puts("Application Corrupted");

Generation

   Crc = CRC32(0xFFFFFFFF, 0x20000 - 4, Buffer);
   *((DWORD *)&Buffer[0x20000 - 4]) = Crc;


A Windows command line tool will be provided to take the .HEX output by
the Keil tool chain and fashion a "signed" binary image.

The purpose of checksumming the application image is to permit the boot
loader to confirm the image was written completely, and correctly,
permitting a recovery path if the updating process did not complete. The
boot loader also initially checks if the applications space is blank, or
erased, to 0xFF saving the time required to perform the more through
check. If also looks for a marker at the end of the vector table to
permit an incomplete, sub 128 KB, write of the application space by the
Keil debugger. The debugger will likely write a smaller footprint, based
on the total size of the compilation and not filled out to 128 KB, and
without the checksum. This should be removed from released code so as
not to defeat the checksum checking. The CRC32 was chosen over an XOR
parity check, or binary sum, due to it's better strength and immunity to
common bit line, and address line failures.

The checksumming will not protect you from coding failures, which could
in some circumstances brick the device or otherwise render it unusable.
In such situations your recovery options would be via JTAG/SWD, USART3
(Flash Demonstrator), or USB (DFU Update Application). Some of these
would require physically access to internal connectors, and jumpers.

The boot loader also permits the application to pass a magic value in
RAM at reset that will cause it to erase the application region. This
would be difficult for the application to successfully achieve by
itself, as erasing executing code would likely result in a crash, and
calling RAM based routines requires more thought, and consideration
about where to return too.

In the absence of a valid application the boot loader will attempt to
power on the modem in the common form factor slot. Two power on
sequences are attempted to handle the pulse width requirements of all
current Telit modems. If a modem powers up the console will move to
forwarding to the modem's AT port, and commands may be sent, and
responses observed. If a modem does not power on, or is missing, the
boot loader will drop to it's console mode where updates can be applied,
memory erased or dumped. The power sequence can also be aborted,
permitting the boot loader console mode to be enter. The X-Modem
protocol is implemented by a light weight solution, that should work
with 128-byte X-ModemCRC and 1024-byte X-Modem1K.  A PC based
transmitter side implementation is also available in source form. The
implementation has been judged to be adequately robust, but independent
testing is recommended.

Other methods of delivering firmware would be to stage via external
storage, like the SD Card, or by using other 128 KB FLASH sectors within
larger devices. Staging is suggested for a number of reasons;
a) When writing and erasing FLASH on STM32 devices significant execution
delays can occur, limiting real time operation and peripheral
responsiveness. This can be particularly impactful when servicing serial
communications devices.
b) Before erasing it is preferable to have a complete and validated
image ready to replace the existing image.
c) Pulling data across a wireless network can be problematic, the
ability to retry or pull compressed or packages images.
d) Rebuilding packets or patches received via SMS on voice/text only
networks.