<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\TERMINUS2\TERMINUS2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\TERMINUS2\TERMINUS2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Jun 18 15:08:11 2015
<BR><P>
<H3>Maximum Stack Usage =        772 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TerminalMode &rArr; SMS_ProcessSMS &rArr; SendATStrML &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from stm32f4xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[60]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[61]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5f]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[64]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[63]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0fprintf$8)
 <LI><a href="#[63]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[62]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[65]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>SystemReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[f6]"></a>Reboot_Loader</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>Reboot_Application</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HardFault_Handler &rArr; hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnicmp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Insert
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Extract
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStrML
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Open
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Setup
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_ProcessSMS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_CheckSMS
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8c]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetSignalQuality
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetNetworkName
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GetPhoneNum
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAT
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModemResponse
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_ProcessSMS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_CheckSMS
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetContext
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_CheckDataReg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_CheckCellReg
</UL>

<P><STRONG><a name="[ae]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetSignalQuality
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStrML
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendMessage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_ProcessSMS
</UL>

<P><STRONG><a name="[8d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GetPhoneNum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetContext
</UL>

<P><STRONG><a name="[89]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WaitForSIMReady
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModemResponse
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemToFaultCode
</UL>

<P><STRONG><a name="[6b]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetSignalQuality
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
</UL>

<P><STRONG><a name="[6d]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[75]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[6c]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[5f]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fe]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ff]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[74]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>EnableTiming</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, t2common.o(i.EnableTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EnableTiming &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>Fifo_Extract</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ringbuffer.o(i.Fifo_Extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Fifo_Extract
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_FillTx
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Forward
</UL>

<P><STRONG><a name="[d8]"></a>Fifo_Flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ringbuffer.o(i.Fifo_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
</UL>

<P><STRONG><a name="[7b]"></a>Fifo_Forward</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, ringbuffer.o(i.Fifo_Forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Fifo_Forward &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Insert
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Extract
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ForwardHalfDuplex
</UL>

<P><STRONG><a name="[7c]"></a>Fifo_Free</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ringbuffer.o(i.Fifo_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Throttle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Insert
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuffer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Forward
</UL>

<P><STRONG><a name="[7e]"></a>Fifo_GetChar</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, ringbuffer.o(i.Fifo_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Fifo_GetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetLine
</UL>

<P><STRONG><a name="[7d]"></a>Fifo_Insert</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ringbuffer.o(i.Fifo_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EmptyRx
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outchar
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuffer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetLine
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Forward
</UL>

<P><STRONG><a name="[7f]"></a>Fifo_Open</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ringbuffer.o(i.Fifo_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fifo_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Open
</UL>

<P><STRONG><a name="[81]"></a>Fifo_ParseGenericLine</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, ringbuffer.o(i.Fifo_ParseGenericLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Fifo_ParseGenericLine
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStrML
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAT
</UL>

<P><STRONG><a name="[82]"></a>Fifo_PeekChar</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ringbuffer.o(i.Fifo_PeekChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Fifo_PeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAT
</UL>

<P><STRONG><a name="[79]"></a>Fifo_Used</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ringbuffer.o(i.Fifo_Used))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Throttle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_FillTx
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Extract
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleForwardingLoop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Flush
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_PeekChar
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_ParseGenericLine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_GetChar
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Free
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Forward
</UL>

<P><STRONG><a name="[83]"></a>GPIO_Configuration</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, t2gpio.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLED
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Suppress
</UL>

<P><STRONG><a name="[dd]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadPwrMon
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadGSMLED
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadDCD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadReset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadOnOff
</UL>

<P><STRONG><a name="[87]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLED
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteReset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteOnOff
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteRTS
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLED
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteReset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteOnOff
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteRTS
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ModemToFaultCode</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, atc.o(i.ModemToFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ModemToFaultCode &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStrML
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
</UL>

<P><STRONG><a name="[8a]"></a>Modem_GetPhoneNum</STRONG> (Thumb, 186 bytes, Stack size 296 bytes, modem.o(i.Modem_GetPhoneNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Modem_GetPhoneNum &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
</UL>

<P><STRONG><a name="[8e]"></a>Modem_ReadDCD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem.o(i.Modem_ReadDCD))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>

<P><STRONG><a name="[90]"></a>Modem_ReadGSMLED</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem.o(i.Modem_ReadGSMLED))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>

<P><STRONG><a name="[91]"></a>Modem_ReadOnOff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem.o(i.Modem_ReadOnOff))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
</UL>

<P><STRONG><a name="[92]"></a>Modem_ReadPwrMon</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem.o(i.Modem_ReadPwrMon))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
</UL>

<P><STRONG><a name="[93]"></a>Modem_ReadReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem.o(i.Modem_ReadReset))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
</UL>

<P><STRONG><a name="[94]"></a>Modem_Reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, modem.o(i.Modem_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_Reset &rArr; Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[97]"></a>Modem_TurnOff</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, modem.o(i.Modem_TurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Modem_TurnOff &rArr; USART6_Suppress &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadPwrMon
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteOnOff
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadReset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadOnOff
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Suppress
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[9c]"></a>Modem_TurnOn</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, modem.o(i.Modem_TurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Modem_TurnOn &rArr; USART6_Suppress &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadPwrMon
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteReset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteOnOff
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadReset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadOnOff
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Suppress
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>Modem_WaitForPowerUp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modem.o(i.Modem_WaitForPowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Modem_WaitForPowerUp &rArr; Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>Modem_WaitForSIMReady</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, modem.o(i.Modem_WaitForSIMReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Modem_WaitForSIMReady &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
</UL>

<P><STRONG><a name="[99]"></a>Modem_WriteOnOff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modem.o(i.Modem_WriteOnOff))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
</UL>

<P><STRONG><a name="[a0]"></a>Modem_WriteRTS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modem.o(i.Modem_WriteRTS))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Throttle
</UL>

<P><STRONG><a name="[95]"></a>Modem_WriteReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modem.o(i.Modem_WriteReset))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_Reset
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>NVIC_Configuration</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[a3]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[a2]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[a5]"></a>Network_ActivateContext</STRONG> (Thumb, 50 bytes, Stack size 176 bytes, network.o(i.Network_ActivateContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Network_ActivateContext &rArr; Network_GetContext &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetContext
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[a8]"></a>Network_CheckCellReg</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, network.o(i.Network_CheckCellReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Network_CheckCellReg &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_WaitForCellReg
</UL>

<P><STRONG><a name="[a9]"></a>Network_CheckDataReg</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, network.o(i.Network_CheckDataReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Network_CheckDataReg &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_WaitForDataReg
</UL>

<P><STRONG><a name="[aa]"></a>Network_DeactivateContext</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, network.o(i.Network_DeactivateContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Network_DeactivateContext &rArr; Network_GetContext &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetContext
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[a7]"></a>Network_GetContext</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, network.o(i.Network_GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Network_GetContext &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_DeactivateContext
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_ActivateContext
</UL>

<P><STRONG><a name="[ac]"></a>Network_GetNetworkName</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, network.o(i.Network_GetNetworkName))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Network_GetNetworkName &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>Network_GetSignalQuality</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, network.o(i.Network_GetSignalQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Network_GetSignalQuality &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>Network_SetupContext</STRONG> (Thumb, 32 bytes, Stack size 136 bytes, network.o(i.Network_SetupContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Network_SetupContext &rArr; SendAT &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[b0]"></a>Network_WaitForCellReg</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, network.o(i.Network_WaitForCellReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Network_WaitForCellReg &rArr; Network_CheckCellReg &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_CheckCellReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>Network_WaitForDataReg</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, network.o(i.Network_WaitForDataReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Network_WaitForDataReg &rArr; Network_CheckDataReg &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_CheckDataReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>PeriodicUART</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, main.o(i.PeriodicUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PeriodicUART &rArr; Uart_FillTx &rArr; Fifo_Extract
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLED
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Throttle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_FillTx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EmptyRx
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadPwrMon
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadGSMLED
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ReadDCD
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b6]"></a>ProbeModemResponse</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, atc.o(i.ProbeModemResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ProbeModemResponse &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStrML
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAT
</UL>

<P><STRONG><a name="[84]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[dc]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
</UL>

<P><STRONG><a name="[e1]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
</UL>

<P><STRONG><a name="[77]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTiming
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b7]"></a>ReceiveAT</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, atc.o(i.ReceiveAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReceiveAT &rArr; ProbeModemResponse &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StripWhiteSpace
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModemResponse
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_PeekChar
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_ParseGenericLine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_GetChar
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
</UL>

<P><STRONG><a name="[b9]"></a>ReceiveATStr</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, atc.o(i.ReceiveATStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReceiveATStr &rArr; ProbeModemResponse &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StripWhiteSpace
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModemResponse
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_PeekChar
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_ParseGenericLine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_GetChar
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
</UL>

<P><STRONG><a name="[ba]"></a>ReceiveATStrML</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, atc.o(i.ReceiveATStrML))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReceiveATStrML &rArr; ProbeModemResponse &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StripWhiteSpace
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModemResponse
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_ParseGenericLine
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStrML
</UL>

<P><STRONG><a name="[be]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[bd]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SDIO_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[bb]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32_t2_sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>SMS_CheckSMS</STRONG> (Thumb, 86 bytes, Stack size 336 bytes, sms.o(i.SMS_CheckSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = SMS_CheckSMS &rArr; SendATStrML &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStrML
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[c2]"></a>SMS_DeleteOneSMS</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sms.o(i.SMS_DeleteOneSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SMS_DeleteOneSMS &rArr; SendAT &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[c3]"></a>SMS_ProcessSMS</STRONG> (Thumb, 292 bytes, Stack size 352 bytes, sms.o(i.SMS_ProcessSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = SMS_ProcessSMS &rArr; SendATStrML &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStrML
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[c4]"></a>SMS_SendSMS</STRONG> (Thumb, 146 bytes, Stack size 112 bytes, sms.o(i.SMS_SendSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SMS_SendSMS &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemToFaultCode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendMessage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Flush
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[c8]"></a>SMS_SetupSMS</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sms.o(i.SMS_SetupSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SMS_SetupSMS &rArr; SendAT &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>SendAT</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, atc.o(i.SendAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendAT &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAT
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemToFaultCode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendMessage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_SetupFirewall
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Setup
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Dial
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Accept
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SetupSMS
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_DeleteOneSMS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_SetupContext
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_DeactivateContext
</UL>

<P><STRONG><a name="[8b]"></a>SendATStr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atc.o(i.SendATStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemToFaultCode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendMessage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetSignalQuality
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetNetworkName
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WaitForSIMReady
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GetPhoneNum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetContext
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_CheckDataReg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_CheckCellReg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_ActivateContext
</UL>

<P><STRONG><a name="[c1]"></a>SendATStrML</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atc.o(i.SendATStrML))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendATStrML &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStrML
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemToFaultCode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendMessage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_ProcessSMS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_CheckSMS
</UL>

<P><STRONG><a name="[c9]"></a>SimpleForwardingLoop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.SimpleForwardingLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SimpleForwardingLoop &rArr; Uart_ForwardFullDuplex &rArr; Uart_ForwardHalfDuplex &rArr; Fifo_Forward &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ForwardFullDuplex
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>Sleep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, t2common.o(i.Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_WaitForDataReg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_WaitForCellReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WaitForSIMReady
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WaitForPowerUp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleForwardingLoop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outchar
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStrML
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_Reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Flush
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_DeactivateContext
</UL>

<P><STRONG><a name="[cb]"></a>Socket_Accept</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, socket.o(i.Socket_Accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Socket_Accept &rArr; SendAT &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[cc]"></a>Socket_Dial</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, socket.o(i.Socket_Dial))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Socket_Dial &rArr; SendAT &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[cd]"></a>Socket_Listen</STRONG> (Thumb, 112 bytes, Stack size 120 bytes, socket.o(i.Socket_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Socket_Listen &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[ce]"></a>Socket_Setup</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, socket.o(i.Socket_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Socket_Setup &rArr; SendAT &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[cf]"></a>Socket_SetupFirewall</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, socket.o(i.Socket_SetupFirewall))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Socket_SetupFirewall &rArr; SendAT &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[b8]"></a>StripWhiteSpace</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, atc.o(i.StripWhiteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStrML
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveATStr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAT
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; PeriodicUART &rArr; Uart_FillTx &rArr; Fifo_Extract
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>TerminalHelp</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, terminal.o(i.TerminalHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TerminalHelp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[d2]"></a>TerminalMode</STRONG> (Thumb, 4216 bytes, Stack size 312 bytes, terminal.o(i.TerminalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = TerminalMode &rArr; SMS_ProcessSMS &rArr; SendATStrML &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ForwardFullDuplex
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_WaitForDataReg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_WaitForCellReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetSignalQuality
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetNetworkName
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleForwardingLoop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnicmp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StripWhiteSpace
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemToFaultCode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteReset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetLine
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_ParseGenericLine
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_SetupFirewall
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Setup
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Dial
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Accept
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalHelp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SetupSMS
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_ProcessSMS
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_DeleteOneSMS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_CheckSMS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_SetupContext
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetContext
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_DeactivateContext
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_ActivateContext
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>Terminus_Init</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, main.o(i.Terminus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Terminus_Init &rArr; Modem_GetPhoneNum &rArr; SendATStr &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WaitForSIMReady
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GetPhoneNum
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Flush
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>UART_Initialization</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.UART_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Initialization &rArr; Uart_Open &rArr; Fifo_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>USART3_Configuration</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, t2uart.o(i.USART3_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USART3_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART3_IRQHandler &rArr; PeriodicUART &rArr; Uart_FillTx &rArr; Fifo_Extract
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>USART6_Configuration</STRONG> (Thumb, 648 bytes, Stack size 96 bytes, t2uart.o(i.USART6_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USART6_Configuration &rArr; USART6_Suppress &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Suppress
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART6_IRQHandler &rArr; PeriodicUART &rArr; Uart_FillTx &rArr; Fifo_Extract
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>USART6_Suppress</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, t2uart.o(i.USART6_Suppress))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART6_Suppress &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
</UL>

<P><STRONG><a name="[e4]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Throttle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EmptyRx
</UL>

<P><STRONG><a name="[df]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
</UL>

<P><STRONG><a name="[e3]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Throttle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EmptyRx
</UL>

<P><STRONG><a name="[e5]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_FillTx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Enable
</UL>

<P><STRONG><a name="[de]"></a>USART_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
</UL>

<P><STRONG><a name="[b5]"></a>Uart_EmptyRx</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, t2uart.o(i.Uart_EmptyRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart_EmptyRx &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Insert
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>

<P><STRONG><a name="[e2]"></a>Uart_Enable</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, t2uart.o(i.Uart_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_Enable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>Uart_FillTx</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, t2uart.o(i.Uart_FillTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Uart_FillTx &rArr; Fifo_Extract
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Extract
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>

<P><STRONG><a name="[c6]"></a>Uart_Flush</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, t2uart.o(i.Uart_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_Flush &rArr; Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStrML
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
</UL>

<P><STRONG><a name="[ca]"></a>Uart_ForwardFullDuplex</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, t2uart.o(i.Uart_ForwardFullDuplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Uart_ForwardFullDuplex &rArr; Uart_ForwardHalfDuplex &rArr; Fifo_Forward &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ForwardHalfDuplex
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleForwardingLoop
</UL>

<P><STRONG><a name="[e6]"></a>Uart_ForwardHalfDuplex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, t2uart.o(i.Uart_ForwardHalfDuplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Uart_ForwardHalfDuplex &rArr; Fifo_Forward &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Forward
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ForwardFullDuplex
</UL>

<P><STRONG><a name="[d5]"></a>Uart_GetLine</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, t2uart.o(i.Uart_GetLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Uart_GetLine &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Insert
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[da]"></a>Uart_Open</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, t2uart.o(i.Uart_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_Open &rArr; Fifo_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Open
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Initialization
</UL>

<P><STRONG><a name="[c7]"></a>Uart_SendBuffer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, t2uart.o(i.Uart_SendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Insert
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendMessage
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
</UL>

<P><STRONG><a name="[c5]"></a>Uart_SendMessage</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, t2uart.o(i.Uart_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendBuffer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATStrML
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
</UL>

<P><STRONG><a name="[b4]"></a>Uart_Throttle</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, t2uart.o(i.Uart_Throttle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart_Throttle &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Used
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WriteRTS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>WriteLED</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, t2gpio.o(i.WriteLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteLED
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicUART
</UL>

<P><STRONG><a name="[e7]"></a>__0fprintf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>__1fprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)

<P><STRONG><a name="[9b]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
</UL>

<P><STRONG><a name="[e9]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[101]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[9a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleForwardingLoop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOff
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalHelp
</UL>

<P><STRONG><a name="[ea]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[102]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[a6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_SetupFirewall
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Setup
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Dial
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Accept
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_SendSMS
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_ProcessSMS
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_DeleteOneSMS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_CheckSMS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_SetupContext
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_ActivateContext
</UL>

<P><STRONG><a name="[103]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[105]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[63]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fputc &rArr; __outchar &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outchar
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf8.o(i.__0fprintf$8)
<LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[67]"></a>hard_fault_handler_c</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, t2common.o(i.hard_fault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = main &rArr; TerminalMode &rArr; SMS_ProcessSMS &rArr; SendATStrML &rArr; Uart_SendMessage &rArr; Uart_SendBuffer &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Configuration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_WaitForDataReg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_WaitForCellReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetSignalQuality
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_GetNetworkName
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_WaitForPowerUp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_TurnOn
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTiming
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Initialization
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminus_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleForwardingLoop
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d3]"></a>stricmp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, t2common.o(i.stricmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>

<P><STRONG><a name="[d4]"></a>strnicmp</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, t2common.o(i.strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strnicmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalMode
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ee]"></a>NVIC_SetPriority</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>__outchar</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.__outchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __outchar &rArr; Fifo_Insert &rArr; Fifo_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fifo_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[bc]"></a>CmdResp1Error</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32_t2_sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[d0]"></a>SetSysClock</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e8]"></a>_printf_core</STRONG> (Thumb, 988 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$8
</UL>

<P><STRONG><a name="[ed]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ec]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[64]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[61]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
